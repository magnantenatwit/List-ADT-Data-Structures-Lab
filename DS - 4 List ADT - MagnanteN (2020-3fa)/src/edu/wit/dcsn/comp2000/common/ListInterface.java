/* @formatter:off * * Dave Rosenberg * Comp 2000 - Data Structures * Lab: List ADT * Fall, 2020 *  * Usage restrictions: *  * You may use this code for exploration, experimentation, and furthering your * learning for this course. You may not use this code for any other * assignments, in my course or elsewhere, without explicit permission, in * advance, from myself (and the instructor of any other course). *  * Further, you may not post nor otherwise share this code with anyone other than * current students in my sections of this course. Violation of these usage * restrictions will be considered a violation of the Wentworth Institute of * Technology Academic Honesty Policy. * * Do not remove this notice. * * @formatter:on */package edu.wit.dcsn.comp2000.common ;import java.util.Iterator ;/** * An interface for the ADT List. Entries in the list have positions that begin with * 0. * * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 * @version 5.0 *  * @author David M Rosenberg * @version 4.1.0 *     <ul> *     <li>initial version based upon Carrano and Henry implementation in the 4th *     edition of the textbook *     <li>modified per assignment *     </ul> * @version 5.1.0 2019-08-07 *     <ul> *     <li>revise to match the 5th edition of the textbook *     <li>revise to match this semester's assignment *     </ul> * @version 5.2.0 2020-07-18 *     <ul> *     <li>remove shuffle() and sort() to EnhancedListInterface, restoring this to *     the book's functionality *     <li>update to coding standard *     </ul> * @version 5.3.0 2020-11-08 move sort() and shuffle() back here and make this Iterable *     to eliminate the second interface *      * @param <T> *     the class of objects to be stored in the list such that {@code T} implements *     the {@code Comparable} interface. */public interface ListInterface<T extends Comparable<? super T>> extends Iterable<T>    {    /**     * Adds a new entry to the end of this list. Entries currently in the list are     * unaffected. The list's size is increased by 1.     *      * @param newEntry     *     the object to be added as a new entry     */    public void add( T newEntry ) ;    /**     * Adds a new entry at a specified position within this list. Entries originally     * at and above the specified position move to the next higher position within     * the list. The list's size is increased by 1.     *      * @param newPosition     *     an integer that specifies the desired position of the new entry     * @param newEntry     *     the object to be added as a new entry     *          * @throws IndexOutOfBoundsException     *     if either {@code newPosition < 0} or {@code newPosition >= getLength()}     */    public void add( int newPosition,                     T newEntry ) ;    /**     * Removes all entries from this list.     */    public void clear() ;    /**     * Sees whether this list contains a given entry.     *      * @param anEntry     *     the object that is the desired entry     * @return {@code true} if this list contains {@code anEntry}, or {@code false}     *     if not     */    public boolean contains( T anEntry ) ;    /**     * Retrieves the entry at a given position in this list.     *      * @param givenPosition     *     an integer that indicates the position of the desired entry     * @return a reference to the indicated entry     *      * @throws IndexOutOfBoundsException     *     if either {@code givenPosition < 0} or     *     {@code givenPosition >= getLength() - 1}     */    public T getEntry( int givenPosition ) ;    /**     * Gets the length of this list.     *     * @return the integer number of entries currently in this list     */    public int getLength() ;    /**     * Sees whether this list is empty.     *     * @return {@code true} if this list is empty, or {@code false} if not     */    public boolean isEmpty() ;    /**     * Removes the entry at a given position from this list. Entries originally at     * positions higher than the given position move to the next lower position     * within the list, and the list's size is decreased by 1.     *      * @param givenPosition     *     an integer that indicates the position of the entry to be removed     * @return a reference to the removed entry     *      * @throws IndexOutOfBoundsException     *     if either {@code givenPosition < 0} or     *     {@code givenPosition >= getLength() - 1}     */    public T remove( int givenPosition ) ;    /**     * Replaces the entry at a given position in this list.     *      * @param givenPosition     *     an integer that indicates the position of the entry to be replaced     * @param newEntry     *     the object that will replace the entry at the position     *     {@code givenPosition}     * @return a reference to the original entry that was replaced     *      * @throws IndexOutOfBoundsException     *     if either {@code givenPosition < 0} or     *     {@code givenPosition >= getLength() - 1}     */    public T replace( int givenPosition,                      T newEntry ) ;    /**     * A convenience method that returns an array referencing every element in the     * list in the same order they appear in the list.     *     * @return a reference to the array     */    public T[] toArray() ;        /**     * Rearranges the entries in this list in (pseudo-)random order using an     * algorithm which approximates shuffling a deck of cards.     */    public default void shuffle()        {        throw new UnsupportedOperationException( "shuffle() is not supported" ) ;        }   // end default shuffle()    /**     * Rearranges the entries in this list in non-descending order according to the     * objects' natural ordering. This sort is stable.     */    public default void sort()        {        throw new UnsupportedOperationException( "sort() is not supported" ) ;        }   // end default sort()            @Override    public default Iterator<T> iterator()        {        throw new UnsupportedOperationException(" iterator() is not supported" ) ;        }    } // end interface ListInterface